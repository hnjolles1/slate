<h2 id='the-smart-contract-api'><strong>The smart contract API</strong></h2>
<p>You can use this documentation to access our CLContract API endpoints, and get information about CLContract types and how to build your own contracts.</p>

<p>We have language bindings in Shell, Ruby, Python, and JavaScript! You can view code examples in the dark area to the right, and you can switch the programming language of the examples with the tabs in the top right.</p>

<p>This example API documentation page was created with <a href="https://github.com/lord/slate">Slate</a>. Feel free to edit it and use it as a base for your own API&#39;s documentation.</p>
<h2 id='authentication'>Authentication</h2>
<blockquote>
<p>To authorize, use this code:</p>
</blockquote>
<pre class="highlight ruby tab-ruby"><code><span class="nb">require</span> <span class="s1">'CLContract'</span>

<span class="n">api</span> <span class="o">=</span> <span class="no">CLContract</span><span class="o">::</span><span class="no">APIClient</span><span class="p">.</span><span class="nf">authorize!</span><span class="p">(</span><span class="s1">'casper'</span><span class="p">)</span>
</code></pre><pre class="highlight python tab-python"><code><span class="kn">import</span> <span class="nn">CLContract</span>

<span class="n">api</span> <span class="o">=</span> <span class="n">CLContract</span><span class="o">.</span><span class="n">authorize</span><span class="p">(</span><span class="s">'casper'</span><span class="p">)</span>
</code></pre><pre class="highlight shell tab-shell"><code><span class="c"># With shell, you can just pass the correct header with each request</span>
curl <span class="s2">"api_endpoint_here"</span>
  -H <span class="s2">"Authorization: casper"</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">CLContract</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'CLContract'</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">api</span> <span class="o">=</span> <span class="nx">CLContract</span><span class="p">.</span><span class="nx">authorize</span><span class="p">(</span><span class="s1">'casper'</span><span class="p">);</span>
</code></pre>
<blockquote>
<p>Make sure to replace <code>casper</code> with your API key.</p>
</blockquote>

<p>CLContract uses API keys to allow access to the API. You can register a new CLContract API key at our <a href="http://example.com/developers">developer portal</a>.</p>

<p>CLContract expects for the API key to be included in all API requests to the server in a header that looks like the following:</p>

<p><code>Authorization: casper</code></p>

<aside class="notice">
You must replace <code>peaceforceandjoy</code> with your personal API key.
</aside>
<h2 id='clcontracts'>CLContracts</h2><h2 id='contract-examples'><strong>Contract examples</strong></h2><h2 id='get-all-clcontracts'>Get All CLContracts</h2><pre class="highlight ruby tab-ruby"><code><span class="nb">require</span> <span class="s1">'casper'</span>

<span class="n">api</span> <span class="o">=</span> <span class="no">Casper</span><span class="o">::</span><span class="no">APIClient</span><span class="p">.</span><span class="nf">authorize!</span><span class="p">(</span><span class="s1">'casper'</span><span class="p">)</span>
<span class="n">api</span><span class="p">.</span><span class="nf">caspers</span><span class="p">.</span><span class="nf">get</span>
</code></pre><pre class="highlight python tab-python"><code><span class="kn">import</span> <span class="nn">clsmartcontract</span>

<span class="n">api</span> <span class="o">=</span> <span class="n">clsmartcontract</span><span class="o">.</span><span class="n">authorize</span><span class="p">(</span><span class="s">'casper'</span><span class="p">)</span>
<span class="n">api</span><span class="o">.</span><span class="n">caspers</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
</code></pre><pre class="highlight shell tab-shell"><code>curl <span class="s2">"http://example.com/api/caspers"</span>
  -H <span class="s2">"Authorization: casper"</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">casper</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'casper'</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">api</span> <span class="o">=</span> <span class="nx">casper</span><span class="p">.</span><span class="nx">authorize</span><span class="p">(</span><span class="s1">'casper'</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">caspers</span> <span class="o">=</span> <span class="nx">api</span><span class="p">.</span><span class="nx">caspers</span><span class="p">.</span><span class="nx">get</span><span class="p">();</span>
</code></pre>
<blockquote>
<p>The above command returns JSON structured like this:</p>
</blockquote>
<pre class="highlight json tab-json"><code><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="s2">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Min"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"awesome"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"texture"</span><span class="p">:</span><span class="w"> </span><span class="mi">6</span><span class="p">,</span><span class="w">
    </span><span class="s2">"value"</span><span class="p">:</span><span class="w"> </span><span class="mi">7</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="s2">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
    </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Max"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"golden"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"texture"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
    </span><span class="s2">"value"</span><span class="p">:</span><span class="w"> </span><span class="mi">11</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre>
<p>This endpoint retrieves all CLContracts.</p>
<h3 id='http-request'>HTTP Request</h3>
<p><code>GET http://example.com/api/CLContracts</code></p>
<h3 id='query-parameters'>Query Parameters</h3>
<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>include_CLContracts</td>
<td>false</td>
<td>If set to true, the result will also include CLContracts.</td>
</tr>
<tr>
<td>available</td>
<td>true</td>
<td>If set to false, the result will include CLContracts that have already been adopted.</td>
</tr>
</tbody></table>

<aside class="success">
Remember â€” a happy dApp developer is an authenticated dApp developer!
</aside>
<h2 id='get-a-specific-clcontract'>Get a Specific CLContract</h2><pre class="highlight ruby tab-ruby"><code><span class="nb">require</span> <span class="s1">'casper'</span>

<span class="n">api</span> <span class="o">=</span> <span class="no">Casper</span><span class="o">::</span><span class="no">APIClient</span><span class="p">.</span><span class="nf">authorize!</span><span class="p">(</span><span class="s1">'casper'</span><span class="p">)</span>
<span class="n">api</span><span class="p">.</span><span class="nf">caspers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre><pre class="highlight python tab-python"><code><span class="kn">import</span> <span class="nn">casper</span>

<span class="n">api</span> <span class="o">=</span> <span class="n">casper</span><span class="o">.</span><span class="n">authorize</span><span class="p">(</span><span class="s">'casper'</span><span class="p">)</span>
<span class="n">api</span><span class="o">.</span><span class="n">caspers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre><pre class="highlight shell tab-shell"><code>curl <span class="s2">"http://example.com/api/caspers/2"</span>
  -H <span class="s2">"Authorization: casper"</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">casper</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'casper'</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">api</span> <span class="o">=</span> <span class="nx">casper</span><span class="p">.</span><span class="nx">authorize</span><span class="p">(</span><span class="s1">'casper'</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">max</span> <span class="o">=</span> <span class="nx">api</span><span class="p">.</span><span class="nx">caspers</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre>
<blockquote>
<p>The above command returns JSON structured like this:</p>
</blockquote>
<pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
  </span><span class="s2">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
  </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Max"</span><span class="p">,</span><span class="w">
  </span><span class="s2">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"secret"</span><span class="p">,</span><span class="w">
  </span><span class="s2">"type"</span><span class="p">:</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span><span class="w">
  </span><span class="s2">"value"</span><span class="p">:</span><span class="w"> </span><span class="mi">11</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
<p>This endpoint retrieves a specific contract.</p>

<aside class="warning">Inside HTML code blocks like this one, you can't use Markdown, so use <code>&lt;code&gt;</code> blocks to denote code.</aside>
<h3 id='http-request-2'>HTTP Request</h3>
<p><code>GET http://example.com/CLContracts/&lt;ID&gt;</code></p>
<h3 id='url-parameters'>URL Parameters</h3>
<table><thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>ID</td>
<td>The ID of the contract to retrieve</td>
</tr>
</tbody></table>

<!--## Delete a Specific CLContract-->

<!--```ruby-->

<!--require 'casper'-->

<!--api = Casper::APIClient.authorize!('casper')-->

<!--api.caspers.delete(2)-->

<!--```-->

<!--```python-->

<!--import casper-->

<!--api = casper.authorize('casper')-->

<!--api.caspers.delete(2)-->

<!--```-->

<!--```shell-->

<!--curl "http://example.com/api/caspers/2"-->

<!--  -X DELETE-->

<!--  -H "Authorization: casper"-->

<!--```-->

<!--```javascript-->

<!--const casper = require('casper');-->

<!--let api = casper.authorize('casper');-->

<!--let max = api.caspers.delete(2);-->

<!--```-->

<!--> The above command returns JSON structured like this:-->

<!--```json-->

<!--{-->

<!--  "id": 2,-->

<!--  "deleted" : ":("-->

<!--}-->

<!--```-->

<!--This endpoint deletes a specific contract.-->

<!--### HTTP Request-->

<!--`DELETE http://example.com/CLContracts/<ID>`-->

<!--### URL Parameters-->

<!--Parameter | Description-->

<!----------- | ------------->

<!--ID | The ID of the contract to delete -->
